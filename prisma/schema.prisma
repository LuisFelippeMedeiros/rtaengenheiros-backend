generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  password   String
  active     Boolean   @default(true)
  created_at DateTime  @default(now())
  created_by String?
  updated_at DateTime?
  updated_by String?
  deleted_at DateTime?
  deleted_by String?
  avatar     String?

  group      Group    @relation(fields: [group_id], references: [id])
  group_id   String
  Company    Company? @relation(fields: [company_id], references: [id])
  company_id String?

  @@map("users")
}

model Group {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  type        String?
  active      Boolean   @default(true)
  created_at  DateTime  @default(now())
  created_by  String?
  updated_at  DateTime?
  updated_by  String?
  deleted_at  DateTime?
  deleted_by  String?

  roles RolesGroup[]
  User  User[]

  @@map("groups")
}

model Role {
  id         String    @id @default(uuid())
  name       String    @unique
  active     Boolean   @default(true)
  action     String?
  module     String?
  type       String?
  created_at DateTime  @default(now())
  created_by String?
  updated_at DateTime?
  updated_by String?
  deleted_at DateTime?
  deleted_by String?

  groups RolesGroup[]

  @@map("roles")
}

model RolesGroup {
  id String @id @default(uuid())

  Group    Group  @relation(fields: [group_id], references: [id])
  group_id String
  Role     Role   @relation(fields: [role_id], references: [id])
  role_id  String

  @@map("rolesgroup")
}

model City {
  id         Int      @id
  name       String
  active     Boolean  @default(true)
  created_at DateTime @default(now())

  State    State @relation(fields: [state_id], references: [id])
  state_id Int

  Company Company[]

  @@map("cities")
}

model State {
  id         Int      @id
  name       String
  initials   String   @unique
  active     Boolean  @default(true)
  created_at DateTime @default(now())

  City City[]

  @@map("states")
}

model Company {
  id         String    @id @default(uuid())
  name       String?
  cnpj       String    @unique()
  ie         String?
  active     Boolean   @default(true)
  created_at DateTime  @default(now())
  created_by String?
  updated_at DateTime?
  updated_by String?
  deleted_at DateTime?
  deleted_by String?

  City    City @relation(fields: [city_id], references: [id])
  city_id Int

  User            User[]
  Billtopay       BillToPay[]
  Supplier        Supplier[]
  PurchaseRequest PurchaseRequest[]

  @@map("companies")
}

model Supplier {
  id           String    @id @default(uuid())
  name         String
  cnpj         String    @unique
  telephone    String
  email        String?
  account      String?
  account_type String?
  operation    String?
  agency       String?
  bank         String?
  pix          String?
  address      String?
  district     String?
  number       String?
  complement   String?
  active       Boolean?  @default(true)
  created_at   DateTime  @default(now())
  created_by   String?
  updated_at   DateTime?
  updated_by   String?
  deleted_at   DateTime?
  deleted_by   String?

  Company    Company? @relation(fields: [company_id], references: [id])
  company_id String?

  PurchaseRequest PurchaseRequestBudget[]
  Billstopay      BillToPay[]
  PurchaseOrder   PurchaseOrder[]

  @@map("suppliers")
}

model Product {
  id         String    @id @default(uuid())
  name       String    @unique
  active     Boolean   @default(true)
  created_at DateTime  @default(now())
  created_by String?
  updated_at DateTime?
  updated_by String?
  deleted_at DateTime?
  deleted_by String?

  Category    Category? @relation(fields: [category_id], references: [id])
  category_id String?
  Unit        Unit?     @relation(fields: [unit_id], references: [id])
  unit_id     String?

  PurchaseRequestProduct PurchaseRequestProduct[]
  PurchaseRequestBudget  PurchaseRequestBudget[]
  ProductPrice           ProductPrice[]
  PurchaseOrderProduct   PurchaseOrderProduct[]

  @@map("products")
}

model ProductPrice {
  id         String   @id @default(uuid())
  Product    Product  @relation(fields: [product_id], references: [id])
  product_id String
  price      Float
  created_by String?
  created_at DateTime @default(now())

  @@map("productprices")
}

model Category {
  id         String    @id @default(uuid())
  name       String    @unique
  active     Boolean   @default(true)
  created_at DateTime  @default(now())
  created_by String?
  updated_at DateTime?
  updated_by String?
  deleted_at DateTime?
  deleted_by String?

  products Product[]

  @@map("categories")
}

model PurchaseRequest {
  id                  String    @id @default(uuid())
  identifier          Int       @unique @default(autoincrement())
  reason              String
  comment             String
  active              Boolean   @default(true)
  approvedgestor_at   DateTime?
  approvedgestor_by   String?
  approveddiretor_at  DateTime?
  approveddiretor_by  String?
  is_approved_gestor  Boolean?
  is_approved_diretor Boolean?
  created_at          DateTime  @default(now())
  created_by          String?
  updated_at          DateTime?
  updated_by          String?
  deleted_at          DateTime?
  deleted_by          String?
  rejected_at         DateTime?
  rejected_by         String?
  has_budget          Boolean?

  Status     Status?  @relation(fields: [status_id], references: [id])
  status_id  String?
  Company    Company? @relation(fields: [company_id], references: [id])
  company_id String?

  PurchaseRequest        PurchaseRequestBudget[]
  PurchaseRequestProduct PurchaseRequestProduct[]
  BillToPay              BillToPay[]
  PurchaseOrder          PurchaseOrder[]

  @@map("purchaserequests")
}

model PurchaseRequestProduct {
  id String @id @default(uuid())

  Product            Product?         @relation(fields: [product_id], references: [id])
  product_id         String?
  PurchaseRequest    PurchaseRequest? @relation(fields: [purchaserequest_id], references: [id])
  purchaserequest_id String?

  @@map("purchaserequestproducts")
}

model PurchaseRequestBudget {
  id             String   @id @default(uuid())
  quantity       Int?
  budget         Float?
  shipping_fee   Float?   @default(0)
  to_be_approved Boolean?

  Supplier           Supplier?        @relation(fields: [supplier_id], references: [id])
  supplier_id        String?
  PurchaseRequest    PurchaseRequest? @relation(fields: [purchaserequest_id], references: [id])
  purchaserequest_id String?
  Product            Product?         @relation(fields: [product_id], references: [id])
  product_id         String?

  @@map("purchaserequestbudgets")
}

model PurchaseOrder {
  id         String @id @default(uuid())
  identifier Int?   @unique @default(autoincrement())

  Supplier             Supplier?              @relation(fields: [supplier_id], references: [id])
  supplier_id          String?
  PurchaseRequest      PurchaseRequest?       @relation(fields: [purchaserequest_id], references: [id])
  purchaserequest_id   String?
  PurchaseOrderProduct PurchaseOrderProduct[]
  billtopay            BillToPay?             @relation(fields: [billtopay_id], references: [identifier])
  billtopay_id         Int?                   @unique

  @@map("purchaseorders")
}

model PurchaseOrderProduct {
  id           String @id @default(uuid())
  quantity     Int
  price        Float
  shipping_fee Float

  PurchaseOrder    PurchaseOrder @relation(fields: [purchaseorder_id], references: [id])
  purchaseorder_id String
  Product          Product?      @relation(fields: [product_id], references: [id])
  product_id       String?

  @@map("purchaseorderproducts")
}

model Status {
  id         String    @id @default(uuid())
  name       String    @unique
  active     Boolean   @default(true)
  created_at DateTime  @default(now())
  created_by String?
  updated_at DateTime?
  updated_by String?
  deleted_at DateTime?
  deleted_by String?

  PurchaseRequest PurchaseRequest[]

  @@map("status")
}

model BillToPay {
  id                 String    @id @unique @default(uuid())
  type               String?
  name               String
  identifier         Int       @unique @default(autoincrement())
  payment_info       String?
  due_date           DateTime?
  scheduling         DateTime?
  reference_month    String?
  issue_date         DateTime?
  comment            String?
  bill_status        String?
  dda                Boolean?
  price_approved     Decimal?
  price_updated      Decimal?
  invoice_attachment String?
  active             Boolean   @default(true)
  created_at         DateTime  @default(now())
  created_by         String?
  updated_at         DateTime?
  updated_by         String?
  deleted_at         DateTime?
  deleted_by         String?

  Company                    Company?         @relation(fields: [company_id], references: [id])
  company_id                 String?
  PurchaseRequest            PurchaseRequest? @relation(fields: [purchaserequest_identifier], references: [identifier])
  purchaserequest_identifier Int?
  Supplier                   Supplier?        @relation(fields: [supplier_id], references: [id])
  supplier_id                String?
  PurchaseOrder              PurchaseOrder?

  @@map("billstopay")
}

model Unit {
  id          String    @id @default(uuid())
  initials    String    @unique
  description String
  active      Boolean   @default(true)
  created_at  DateTime  @default(now())
  created_by  String?
  updated_at  DateTime?
  updated_by  String?
  deleted_at  DateTime?
  deleted_by  String?

  Product Product[]

  @@map("units")
}
